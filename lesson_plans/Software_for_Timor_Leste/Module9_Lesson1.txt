# Module 9: Team Projects and Role Rotation (2 weeks)

## Lesson Objectives
By the end of this module, students will be able to:
1. Form effective development teams and understand team dynamics
2. Create web pages and games from templates
3. Rotate through different roles in a development team
4. Apply skills learned throughout the course in a practical project
5. Present and demonstrate their team project

## Duration
2 weeks (10 working days)

## Materials
- Computers with necessary development environments
- Project management tools (e.g., Trello, GitHub Projects)
- Version control system (e.g., Git)
- Communication tools (e.g., Slack, Microsoft Teams)

## Lesson Outline

### Day 1: Introduction and Team Formation
1. Overview of module objectives and expectations
2. Team formation exercises
3. Introduction to project options and templates
4. Team role definitions and responsibilities

### Days 2-3: Project Planning and Setup
1. Teams choose their project
2. Initial project planning and task breakdown
3. Setting up development environments and version control
4. Assigning initial roles

### Days 4-7: Development Sprint 1
1. Daily stand-up meetings
2. Coding and development work
3. Regular check-ins with instructor
4. End of sprint review and retrospective

### Day 8: Role Rotation
1. Teams rotate roles
2. Handover sessions between team members
3. Planning for Sprint 2

### Days 9-10: Development Sprint 2 and Presentation Prep
1. Continued development with new roles
2. Preparation for final presentation
3. Code cleanup and documentation

### Day 11: Final Presentations
1. Each team presents their project
2. Q&A sessions
3. Peer and instructor feedback

## Sample Projects

Here are 6 different coding projects that students could work on, along with some starter code for each:

### 1. Weather Dashboard Web Application
A web application that displays current weather and forecasts for multiple cities.

Starter code:
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Dashboard</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>Weather Dashboard</h1>
    </header>
    <main>
        <section id="search">
            <input type="text" id="city-input" placeholder="Enter city name">
            <button id="search-btn">Search</button>
        </section>
        <section id="weather-display">
            <!-- Weather data will be displayed here -->
        </section>
    </main>
    <script src="app.js"></script>
</body>
</html>
```

### 2. Task Management System
A desktop application for managing tasks and projects.

Starter code:
```python
import tkinter as tk
from tkinter import ttk

class TaskManager:
    def __init__(self, master):
        self.master = master
        master.title("Task Manager")

        self.task_list = []

        self.task_entry = ttk.Entry(master, width=40)
        self.task_entry.grid(row=0, column=0, padx=5, pady=5)

        self.add_button = ttk.Button(master, text="Add Task", command=self.add_task)
        self.add_button.grid(row=0, column=1, padx=5, pady=5)

        self.task_listbox = tk.Listbox(master, width=50)
        self.task_listbox.grid(row=1, column=0, columnspan=2, padx=5, pady=5)

    def add_task(self):
        task = self.task_entry.get()
        if task:
            self.task_list.append(task)
            self.task_listbox.insert(tk.END, task)
            self.task_entry.delete(0, tk.END)

root = tk.Tk()
task_manager = TaskManager(root)
root.mainloop()
```

### 3. E-commerce Product Catalog
A web-based product catalog for an e-commerce site.

Starter code:
```javascript
// app.js
const express = require('express');
const app = express();
const port = 3000;

app.use(express.static('public'));

const products = [
    { id: 1, name: 'Product 1', price: 19.99 },
    { id: 2, name: 'Product 2', price: 29.99 },
    { id: 3, name: 'Product 3', price: 39.99 },
];

app.get('/api/products', (req, res) => {
    res.json(products);
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
```

### 4. 2D Platformer Game
A simple 2D platformer game using Python and Pygame.

Starter code:
```python
import pygame

pygame.init()

# Set up the display
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("2D Platformer")

# Colors
WHITE = (255, 255, 255)
BLUE = (0, 0, 255)

# Player properties
player_x = 50
player_y = HEIGHT - 100
player_width = 40
player_height = 60
player_speed = 5
player_jump = -15
player_y_momentum = 0

# Main game loop
running = True
clock = pygame.time.Clock()

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        player_x -= player_speed
    if keys[pygame.K_RIGHT]:
        player_x += player_speed
    if keys[pygame.K_SPACE] and player_y == HEIGHT - player_height:
        player_y_momentum = player_jump

    # Apply gravity
    player_y_momentum += 0.5
    player_y += player_y_momentum

    # Keep player on screen
    if player_y > HEIGHT - player_height:
        player_y = HEIGHT - player_height
        player_y_momentum = 0

    # Draw everything
    screen.fill(WHITE)
    pygame.draw.rect(screen, BLUE, (player_x, player_y, player_width, player_height))
    pygame.display.flip()

    clock.tick(60)

pygame.quit()
```

### 5. Social Media Analytics Dashboard
A web application that displays analytics for social media accounts.

Starter code:
```python
from flask import Flask, render_template
import random

app = Flask(__name__)

@app.route('/')
def index():
    # Simulated data - replace with real API calls
    followers = random.randint(1000, 10000)
    likes = random.randint(5000, 50000)
    comments = random.randint(100, 1000)
    shares = random.randint(50, 500)

    return render_template('dashboard.html', 
                           followers=followers, 
                           likes=likes, 
                           comments=comments, 
                           shares=shares)

if __name__ == '__main__':
    app.run(debug=True)
```

### 6. Inventory Management System
A desktop application for managing inventory in a small business.

Starter code:
```python
import tkinter as tk
from tkinter import ttk
import sqlite3

class InventoryManager:
    def __init__(self, master):
        self.master = master
        master.title("Inventory Management System")

        # Create database connection
        self.conn = sqlite3.connect('inventory.db')
        self.create_table()

        # Create GUI elements
        self.tree = ttk.Treeview(master, columns=('ID', 'Name', 'Quantity', 'Price'), show='headings')
        self.tree.heading('ID', text='ID')
        self.tree.heading('Name', text='Name')
        self.tree.heading('Quantity', text='Quantity')
        self.tree.heading('Price', text='Price')
        self.tree.pack(pady=10)

        self.load_inventory()

        # Add item frame
        add_frame = ttk.Frame(master)
        add_frame.pack(pady=10)

        ttk.Label(add_frame, text='Name:').grid(row=0, column=0)
        self.name_entry = ttk.Entry(add_frame)
        self.name_entry.grid(row=0, column=1)

        ttk.Label(add_frame, text='Quantity:').grid(row=1, column=0)
        self.quantity_entry = ttk.Entry(add_frame)
        self.quantity_entry.grid(row=1, column=1)

        ttk.Label(add_frame, text='Price:').grid(row=2, column=0)
        self.price_entry = ttk.Entry(add_frame)
        self.price_entry.grid(row=2, column=1)

        ttk.Button(add_frame, text='Add Item', command=self.add_item).grid(row=3, column=0, columnspan=2)

    def create_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS inventory
                          (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER, price REAL)''')
        self.conn.commit()

    def load_inventory(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM inventory')
        for row in cursor.fetchall():
            self.tree.insert('', 'end', values=row)

    def add_item(self):
        name = self.name_entry.get()
        quantity = int(self.quantity_entry.get())
        price = float(self.price_entry.get())

        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO inventory (name, quantity, price) VALUES (?, ?, ?)',
                       (name, quantity, price))
        self.conn.commit()

        self.tree.insert('', 'end', values=(cursor.lastrowid, name, quantity, price))

        self.name_entry.delete(0, 'end')
        self.quantity_entry.delete(0, 'end')
        self.price_entry.delete(0, 'end')

root = tk.Tk()
inventory_manager = InventoryManager(root)
root.mainloop()
```

## Assessment
- Daily progress reports from each team
- Peer evaluations of team members' contributions
- Final project presentation and demonstration
- Individual reflection on the team project experience

## Additional Resources
- "Agile Software Development" by Robert C. Martin
- "The Mythical Man-Month" by Frederick P. Brooks Jr.
- Online tutorials for specific technologies used in projects

## Next Steps
After completing this module, students should be encouraged to:
1. Reflect on their team experience and areas for improvement
2. Continue developing their project or start a new one
3. Explore more advanced topics in software development
4. Consider how AI tools could be integrated into their development process