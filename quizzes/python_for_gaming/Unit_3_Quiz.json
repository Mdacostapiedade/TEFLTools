{
  "title": "Control Flow in Python",
  "questions": [
    {
      "question": "What is the purpose of control flow in programming?",
      "choices": [
        "To determine the order in which program instructions are executed",
        "To control the flow of electricity in the computer",
        "To manage the flow of data between memory and CPU",
        "To regulate the speed of the program execution"
      ],
      "answer": "To determine the order in which program instructions are executed"
    },
    {
      "question": "Which keyword is used to start an if statement in Python?",
      "choices": [
        "if",
        "else",
        "elif",
        "then"
      ],
      "answer": "if"
    },
    {
      "question": "What is the purpose of the 'else' clause in an if/else statement?",
      "choices": [
        "To execute code when the if condition is False",
        "To execute code when the if condition is True",
        "To check an additional condition",
        "To end the if statement"
      ],
      "answer": "To execute code when the if condition is False"
    },
    {
      "question": "What does the 'elif' keyword stand for in Python?",
      "choices": [
        "Else if",
        "Else in if",
        "Else loop if",
        "End loop if"
      ],
      "answer": "Else if"
    },
    {
      "question": "Which loop is used when you know in advance how many times you want to repeat the code?",
      "choices": [
        "for loop",
        "while loop",
        "do-while loop",
        "repeat-until loop"
      ],
      "answer": "for loop"
    },
    {
      "question": "What is the correct syntax for a basic while loop in Python?",
      "choices": [
        "while condition:",
        "while (condition) {",
        "do { } while (condition);",
        "while: condition"
      ],
      "answer": "while condition:"
    },
    {
      "question": "Which of the following is NOT a valid loop in Python?",
      "choices": [
        "do-while loop",
        "for loop",
        "while loop",
        "nested loop"
      ],
      "answer": "do-while loop"
    },
    {
      "question": "What type of expression is used in the condition of an if statement or while loop?",
      "choices": [
        "Boolean expression",
        "Numeric expression",
        "String expression",
        "List expression"
      ],
      "answer": "Boolean expression"
    },
    {
      "question": "What does the 'range()' function do in a for loop?",
      "choices": [
        "Generates a sequence of numbers",
        "Defines the range of acceptable values",
        "Limits the number of loop iterations",
        "Specifies the step size for the loop"
      ],
      "answer": "Generates a sequence of numbers"
    },
    {
      "question": "Which statement is used to immediately exit a loop in Python?",
      "choices": [
        "break",
        "exit",
        "return",
        "continue"
      ],
      "answer": "break"
    },
    {
      "question": "What does the 'continue' statement do in a loop?",
      "choices": [
        "Skips the rest of the current iteration and moves to the next",
        "Continues the loop indefinitely",
        "Exits the loop immediately",
        "Pauses the loop execution"
      ],
      "answer": "Skips the rest of the current iteration and moves to the next"
    },
    {
      "question": "What is the purpose of indentation in Python's control flow structures?",
      "choices": [
        "To define code blocks",
        "To improve code readability",
        "To save memory",
        "To increase execution speed"
      ],
      "answer": "To define code blocks"
    },
    {
      "question": "Which of the following is a valid way to iterate over a list in Python?",
      "choices": [
        "for item in list:",
        "for (item in list) {",
        "foreach (item in list) {",
        "while (item in list) {"
      ],
      "answer": "for item in list:"
    },
    {
      "question": "What is the result of the boolean expression '5 > 3 and 2 < 4'?",
      "choices": [
        "True",
        "False",
        "5",
        "2"
      ],
      "answer": "True"
    },
    {
      "question": "Which function can be used with a for loop to get both the index and value of items in a list?",
      "choices": [
        "enumerate()",
        "index()",
        "range()",
        "zip()"
      ],
      "answer": "enumerate()"
    },
    {
      "question": "What is the purpose of the 'pass' statement in Python?",
      "choices": [
        "To create an empty code block",
        "To pass control to the next statement",
        "To skip the current iteration of a loop",
        "To exit a function"
      ],
      "answer": "To create an empty code block"
    },
    {
      "question": "Which of the following is NOT a valid comparison operator in Python?",
      "choices": [
        "===",
        "==",
        "!=",
        "<="
      ],
      "answer": "==="
    },
    {
      "question": "What is the correct way to check if a variable 'x' is between 10 and 20 (inclusive)?",
      "choices": [
        "10 <= x <= 20",
        "10 < x < 20",
        "x > 10 and x < 20",
        "x >= 10 or x <= 20"
      ],
      "answer": "10 <= x <= 20"
    },
    {
      "question": "Which statement is used to define a function in Python?",
      "choices": [
        "def",
        "function",
        "define",
        "func"
      ],
      "answer": "def"
    },
    {
      "question": "What is the purpose of the 'return' statement in a function?",
      "choices": [
        "To specify the value the function should output",
        "To exit the function immediately",
        "To return to the beginning of the function",
        "To print the result of the function"
      ],
      "answer": "To specify the value the function should output"
    },
    {
      "question": "Which of the following is a valid way to call a function named 'greet' with no arguments?",
      "choices": [
        "greet()",
        "call greet",
        "function greet",
        "greet[]"
      ],
      "answer": "greet()"
    },
    {
      "question": "What is the purpose of function parameters?",
      "choices": [
        "To accept input values for the function to use",
        "To specify the return type of the function",
        "To define local variables within the function",
        "To control the flow of execution within the function"
      ],
      "answer": "To accept input values for the function to use"
    },
    {
      "question": "Which of the following is true about Python functions?",
      "choices": [
        "Functions can return multiple values",
        "Functions must always have a return statement",
        "Functions cannot be nested within other functions",
        "Functions must have at least one parameter"
      ],
      "answer": "Functions can return multiple values"
    },
    {
      "question": "What is a recursive function?",
      "choices": [
        "A function that calls itself",
        "A function that runs in reverse",
        "A function that only uses loops",
        "A function that has no parameters"
      ],
      "answer": "A function that calls itself"
    },
    {
      "question": "Which of the following is NOT a valid way to define a function in Python?",
      "choices": [
        "function greet():",
        "def greet():",
        "greet = lambda:",
        "class Greet:"
      ],
      "answer": "function greet():"
    },
    {
      "question": "What is the purpose of the 'global' keyword in Python?",
      "choices": [
        "To declare a global variable inside a function",
        "To create a new global variable",
        "To prevent a variable from being modified",
        "To import global modules"
      ],
      "answer": "To declare a global variable inside a function"
    },
    {
      "question": "Which of the following is true about default parameter values in Python functions?",
      "choices": [
        "Default values are evaluated when the function is defined",
        "Default values are evaluated each time the function is called",
        "Default values must be immutable objects",
        "Default values can only be used for the last parameter"
      ],
      "answer": "Default values are evaluated when the function is defined"
    },
    {
      "question": "What is the purpose of the '*args' parameter in a function definition?",
      "choices": [
        "To accept an arbitrary number of positional arguments",
        "To multiply all arguments passed to the function",
        "To unpack a list of arguments",
        "To define a variable number of keyword arguments"
      ],
      "answer": "To accept an arbitrary number of positional arguments"
    },
    {
      "question": "Which of the following is a correct way to define a lambda function in Python?",
      "choices": [
        "lambda x: x * 2",
        "def lambda(x): return x * 2",
        "lambda = x * 2",
        "x => x * 2"
      ],
      "answer": "lambda x: x * 2"
    },
    {
      "question": "What is the purpose of the 'nonlocal' keyword in Python?",
      "choices": [
        "To refer to variables in the nearest enclosing scope",
        "To create a new local variable",
        "To declare a global variable",
        "To prevent variable modification"
      ],
      "answer": "To refer to variables in the nearest enclosing scope"
    }
  ]
}