{
  "title": "Learning Unit 4: Functions",
  "questions": [
    {
      "question": "What keyword is used to define a function in Python?",
      "choices": [
        "function",
        "def",
        "define",
        "func"
      ],
      "answer": "def"
    },
    {
      "question": "Which of the following is the correct syntax for defining a function?",
      "choices": [
        "function my_function():",
        "def my_function{}:",
        "def my_function():",
        "define my_function():"
      ],
      "answer": "def my_function():"
    },
    {
      "question": "What are the variables listed in a function definition called?",
      "choices": [
        "Arguments",
        "Parameters",
        "Inputs",
        "Variables"
      ],
      "answer": "Parameters"
    },
    {
      "question": "What are the actual values passed to a function when it is called?",
      "choices": [
        "Parameters",
        "Arguments",
        "Inputs",
        "Variables"
      ],
      "answer": "Arguments"
    },
    {
      "question": "Which statement is used to send a value back from a function?",
      "choices": [
        "send",
        "return",
        "output",
        "yield"
      ],
      "answer": "return"
    },
    {
      "question": "What is the default return value of a function if no return statement is used?",
      "choices": [
        "0",
        "None",
        "False",
        "An empty string"
      ],
      "answer": "None"
    },
    {
      "question": "How are multiple parameters separated in a function definition?",
      "choices": [
        "By semicolons",
        "By commas",
        "By colons",
        "By spaces"
      ],
      "answer": "By commas"
    },
    {
      "question": "What naming convention is recommended for function names in Python?",
      "choices": [
        "CamelCase",
        "PascalCase",
        "snake_case",
        "UPPERCASE"
      ],
      "answer": "snake_case"
    },
    {
      "question": "Which of the following is a valid function call?",
      "choices": [
        "my_function;",
        "call my_function()",
        "my_function()",
        "function my_function"
      ],
      "answer": "my_function()"
    },
    {
      "question": "What happens if a function is called with fewer arguments than it has parameters?",
      "choices": [
        "The function uses default values for the missing arguments",
        "The function raises a TypeError",
        "The function ignores the missing arguments",
        "The function returns None"
      ],
      "answer": "The function raises a TypeError"
    },
    {
      "question": "How can a function return multiple values?",
      "choices": [
        "By using multiple return statements",
        "By returning a tuple",
        "By using a comma-separated list in the return statement",
        "Functions can only return one value"
      ],
      "answer": "By returning a tuple"
    },
    {
      "question": "What is the purpose of the 'pass' statement in a function?",
      "choices": [
        "To skip the function execution",
        "To indicate an empty function body",
        "To pass arguments to the function",
        "To return a value from the function"
      ],
      "answer": "To indicate an empty function body"
    },
    {
      "question": "Which of the following is true about function parameters in Python?",
      "choices": [
        "They must always have default values",
        "They are always required when calling the function",
        "They can have default values",
        "They cannot be modified within the function"
      ],
      "answer": "They can have default values"
    },
    {
      "question": "What is the correct way to define a function with a default parameter value?",
      "choices": [
        "def function(param = default_value):",
        "def function(param: default_value):",
        "def function(param <- default_value):",
        "def function(default_value -> param):"
      ],
      "answer": "def function(param = default_value):"
    },
    {
      "question": "Which principle does the use of functions support in programming?",
      "choices": [
        "DRY (Don't Repeat Yourself)",
        "WET (Write Everything Twice)",
        "YAGNI (You Aren't Gonna Need It)",
        "KISS (Keep It Simple, Stupid)"
      ],
      "answer": "DRY (Don't Repeat Yourself)"
    },
    {
      "question": "What is the scope of a variable defined inside a function?",
      "choices": [
        "Global scope",
        "Module scope",
        "Local scope",
        "Class scope"
      ],
      "answer": "Local scope"
    },
    {
      "question": "How can you make a function variable accessible outside the function?",
      "choices": [
        "By using the 'global' keyword",
        "By returning the variable",
        "By declaring it outside the function",
        "Variables inside functions are always accessible outside"
      ],
      "answer": "By using the 'global' keyword"
    },
    {
      "question": "What is a lambda function in Python?",
      "choices": [
        "A function with multiple return values",
        "A function that calls itself",
        "An anonymous function defined with the 'lambda' keyword",
        "A function that takes other functions as arguments"
      ],
      "answer": "An anonymous function defined with the 'lambda' keyword"
    },
    {
      "question": "Which of the following is true about function documentation in Python?",
      "choices": [
        "It is optional and rarely used",
        "It is written as comments after each line of code",
        "It is written as a docstring at the beginning of the function",
        "It is automatically generated by Python"
      ],
      "answer": "It is written as a docstring at the beginning of the function"
    },
    {
      "question": "What is the purpose of the '*args' parameter in a function definition?",
      "choices": [
        "To accept a dictionary of keyword arguments",
        "To accept a variable number of positional arguments",
        "To make all parameters optional",
        "To indicate that the function takes no arguments"
      ],
      "answer": "To accept a variable number of positional arguments"
    },
    {
      "question": "What is the purpose of the '**kwargs' parameter in a function definition?",
      "choices": [
        "To accept a variable number of positional arguments",
        "To accept a dictionary of keyword arguments",
        "To make all parameters required",
        "To indicate that the function returns multiple values"
      ],
      "answer": "To accept a dictionary of keyword arguments"
    },
    {
      "question": "Which of the following is an example of a pure function?",
      "choices": [
        "A function that modifies a global variable",
        "A function that prints to the console",
        "A function that returns the same output for the same input without side effects",
        "A function that reads from a file"
      ],
      "answer": "A function that returns the same output for the same input without side effects"
    },
    {
      "question": "What is a recursive function?",
      "choices": [
        "A function that calls other functions",
        "A function that calls itself",
        "A function with multiple return statements",
        "A function that uses loops"
      ],
      "answer": "A function that calls itself"
    },
    {
      "question": "What is the purpose of the 'nonlocal' keyword in Python?",
      "choices": [
        "To declare a global variable",
        "To access variables in the enclosing (non-global) scope",
        "To create a local variable",
        "To import variables from another module"
      ],
      "answer": "To access variables in the enclosing (non-global) scope"
    },
    {
      "question": "Which of the following is true about function overloading in Python?",
      "choices": [
        "Python supports function overloading natively",
        "Function overloading can be achieved using default parameters",
        "Function overloading is not possible in Python",
        "Function overloading requires the 'overload' decorator"
      ],
      "answer": "Function overloading can be achieved using default parameters"
    },
    {
      "question": "What is a higher-order function?",
      "choices": [
        "A function that takes more than 3 parameters",
        "A function that returns multiple values",
        "A function that takes other functions as arguments or returns functions",
        "A function defined inside another function"
      ],
      "answer": "A function that takes other functions as arguments or returns functions"
    },
    {
      "question": "Which of the following is an advantage of using functions?",
      "choices": [
        "Functions always make the code run faster",
        "Functions allow for code reusability and modularity",
        "Functions automatically handle errors and exceptions",
        "Functions eliminate the need for variables"
      ],
      "answer": "Functions allow for code reusability and modularity"
    },
    {
      "question": "What is the difference between a function and a method in Python?",
      "choices": [
        "Functions are defined inside classes, methods are not",
        "Methods are defined inside classes, functions are not",
        "Functions can have parameters, methods cannot",
        "There is no difference, the terms are interchangeable"
      ],
      "answer": "Methods are defined inside classes, functions are not"
    },
    {
      "question": "In the context of the Timor-Leste examples, what would be the purpose of a function named 'usd_to_centavos'?",
      "choices": [
        "To convert US dollars to Timorese centavos",
        "To calculate the GDP of Timor-Leste",
        "To translate English to Tetum",
        "To generate random facts about Timor-Leste"
      ],
      "answer": "To convert US dollars to Timorese centavos"
    },
    {
      "question": "What type of function would be most appropriate for generating random facts about Timor-Leste?",
      "choices": [
        "A recursive function",
        "A lambda function",
        "A function that returns a random choice from a list",
        "A function that takes user input"
      ],
      "answer": "A function that returns a random choice from a list"
    }
  ]
}